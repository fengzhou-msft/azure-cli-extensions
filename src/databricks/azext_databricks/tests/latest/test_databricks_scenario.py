# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
import unittest

from azure_devtools.scenario_tests import AllowLargeResponse
from azure.cli.testsdk import ScenarioTest
from .. import try_manual
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


@try_manual
def setup(test, rg, rg_2):
    pass


# EXAMPLE: Create or update workspace
@try_manual
def step_create_or_update_workspace(test, rg, rg_2):
    test.cmd('az databricks workspace create '
             '--parameters "{{\\"location\\":\\"westus\\",\\"properties\\":{{\\"managedResourceGroupId\\":\\"/subscript'
             'ions/{subscription_id}/resourceGroups/{rg}\\"}}}}" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: Create or update workspace with custom parameters
@try_manual
def step_create_or_update_workspace_with_custom_parameters(test, rg, rg_2):
    test.cmd('az databricks workspace create '
             '--parameters "{{\\"location\\":\\"westus\\",\\"properties\\":{{\\"managedResourceGroupId\\":\\"/subscript'
             'ions/{subscription_id}/resourceGroups/{rg}\\",\\"parameters\\":{{\\"customPrivateSubnetName\\":{{\\"value'
             '\\":\\"myPrivateSubnet\\"}},\\"customPublicSubnetName\\":{{\\"value\\":\\"myPublicSubnet\\"}},\\"customVi'
             'rtualNetworkId\\":{{\\"value\\":\\"/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Micro'
             'soft.Network/virtualNetworks/{vn}\\"}}}}}}}}" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: Get a workspace with custom parameters
@try_manual
def step_get_a_workspace_with_custom_parameters(test, rg, rg_2):
    test.cmd('az databricks workspace show '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: Get a workspace
@try_manual
def step_get_a_workspace(test, rg, rg_2):
    test.cmd('az databricks workspace show '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: Lists workspaces
@try_manual
def step_lists_workspaces(test, rg, rg_2):
    test.cmd('az databricks workspace list '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: Lists workspaces
@try_manual
def step_lists_workspaces(test, rg, rg_2):
    test.cmd('az databricks workspace list '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: Operations
@try_manual
def step_operations(test, rg, rg_2):
    # EXAMPLE NOT FOUND!
    pass


# EXAMPLE: Update a workspace's tags.
@try_manual
def step_update_a_workspace_s_tags_(test, rg, rg_2):
    test.cmd('az databricks workspace update '
             '--tags mytag1="myvalue1" '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


# EXAMPLE: Delete a workspace
@try_manual
def step_delete_a_workspace(test, rg, rg_2):
    test.cmd('az databricks workspace delete '
             '--resource-group "{rg_2}" '
             '--workspace-name "{myWorkspace}"',
             checks=[])


@try_manual
def cleanup(test, rg, rg_2):
    pass


class DatabricksClientScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestdatabricks_myManagedRG'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestdatabricks_rg'[:7], key='rg_2', parameter_name='rg_2')
    @VirtualNetworkPreparer(name_prefix='clitestdatabricks_myNetwork'[:7], key='vn', resource_group_key='rg_2')
    def test_databricks(self, rg, rg_2):

        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myWorkspace': self.create_random_name(prefix='clitestworkspaces'[:7], length=24),
        })

        setup(self, rg, rg_2)
        step_create_or_update_workspace(self, rg, rg_2)
        step_create_or_update_workspace_with_custom_parameters(self, rg, rg_2)
        step_get_a_workspace_with_custom_parameters(self, rg, rg_2)
        step_get_a_workspace(self, rg, rg_2)
        step_lists_workspaces(self, rg, rg_2)
        step_lists_workspaces(self, rg, rg_2)
        step_operations(self, rg, rg_2)
        step_update_a_workspace_s_tags_(self, rg, rg_2)
        step_delete_a_workspace(self, rg, rg_2)
        cleanup(self, rg, rg_2)
