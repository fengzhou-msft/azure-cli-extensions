# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_datashare.generated._client_factory import cf_account
    datashare_account = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._accounts_operations#AccountsOperations.{}',
        client_factory=cf_account)
    with self.command_group('datashare account', datashare_account, client_factory=cf_account) as g:
        g.custom_command('list', 'datashare_account_list')
        g.custom_show_command('show', 'datashare_account_show')
        g.custom_command('create', 'datashare_account_create', supports_no_wait=True)
        g.custom_command('update', 'datashare_account_update')
        g.custom_command('delete', 'datashare_account_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datashare_account_show')

    from azext_datashare.generated._client_factory import cf_consumer_invitation
    datashare_consumer_invitation = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._consumer_invitations_operations#ConsumerIn'
        'vitationsOperations.{}',
        client_factory=cf_consumer_invitation)
    with self.command_group('datashare consumer invitation', datashare_consumer_invitation,
                            client_factory=cf_consumer_invitation) as g:
        g.custom_command('list', 'datashare_consumer_invitation_list')
        g.custom_show_command('show', 'datashare_consumer_invitation_show')
        g.custom_command('reject', 'datashare_consumer_invitation_reject')

    from azext_datashare.generated._client_factory import cf_data_set
    datashare_data_set = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._data_sets_operations#DataSetsOperations.{}'
        '',
        client_factory=cf_data_set)
    with self.command_group('datashare dataset', datashare_data_set, client_factory=cf_data_set) as g:
        g.custom_command('list', 'datashare_dataset_list')
        g.custom_show_command('show', 'datashare_dataset_show')
        g.custom_command('create', 'datashare_dataset_create')
        g.custom_command('delete', 'datashare_dataset_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datashare_dataset_show')

    from azext_datashare.generated._client_factory import cf_data_set_mapping
    datashare_data_set_mapping = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._data_set_mappings_operations#DataSetMappin'
        'gsOperations.{}',
        client_factory=cf_data_set_mapping)
    with self.command_group('datashare consumer dataset-mapping', datashare_data_set_mapping,
                            client_factory=cf_data_set_mapping) as g:
        g.custom_command('list', 'datashare_consumer_dataset_mapping_list')
        g.custom_show_command('show', 'datashare_consumer_dataset_mapping_show')
        g.custom_command('create', 'datashare_consumer_dataset_mapping_create')
        g.custom_command('delete', 'datashare_consumer_dataset_mapping_delete', confirmation=True)

    from azext_datashare.generated._client_factory import cf_invitation
    datashare_invitation = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._invitations_operations#InvitationsOperatio'
        'ns.{}',
        client_factory=cf_invitation)
    with self.command_group('datashare invitation', datashare_invitation, client_factory=cf_invitation) as g:
        g.custom_command('list', 'datashare_invitation_list')
        g.custom_show_command('show', 'datashare_invitation_show')
        g.custom_command('create', 'datashare_invitation_create')
        g.custom_command('delete', 'datashare_invitation_delete', confirmation=True)

    from azext_datashare.generated._client_factory import cf_share
    datashare_share = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._shares_operations#SharesOperations.{}',
        client_factory=cf_share)
    with self.command_group('datashare', datashare_share, client_factory=cf_share, is_experimental=True) as g:
        g.custom_command('list', 'datashare_list')
        g.custom_command('synchronization list', 'datashare_synchronization_list')
        g.custom_show_command('show', 'datashare_show')
        g.custom_command('create', 'datashare_create')
        g.custom_command('delete', 'datashare_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('synchronization list-detail', 'datashare_synchronization_list_detail')
        g.custom_wait_command('wait', 'datashare_show')

    from azext_datashare.generated._client_factory import cf_provider_share_subscription
    datashare_provider_share_subscription = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._provider_share_subscriptions_operations#Pr'
        'oviderShareSubscriptionsOperations.{}',
        client_factory=cf_provider_share_subscription)
    with self.command_group('datashare provider-share-subscription', datashare_provider_share_subscription,
                            client_factory=cf_provider_share_subscription) as g:
        g.custom_command('list', 'datashare_provider_share_subscription_list')
        g.custom_show_command('show', 'datashare_provider_share_subscription_show')
        g.custom_command('reinstate', 'datashare_provider_share_subscription_reinstate')
        g.custom_command('revoke', 'datashare_provider_share_subscription_revoke', supports_no_wait=True)
        g.custom_wait_command('wait', 'datashare_provider_share_subscription_show')

    from azext_datashare.generated._client_factory import cf_share_subscription
    datashare_share_subscription = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._share_subscriptions_operations#ShareSubscr'
        'iptionsOperations.{}',
        client_factory=cf_share_subscription)
    with self.command_group('datashare consumer share-subscription', datashare_share_subscription,
                            client_factory=cf_share_subscription) as g:
        g.custom_command('list', 'datashare_consumer_share_subscription_list')
        g.custom_command('synchronization list', 'datashare_consumer_share_subscription_synchronization_list')
        g.custom_show_command('show', 'datashare_consumer_share_subscription_show')
        g.custom_command('create', 'datashare_consumer_share_subscription_create')
        g.custom_command('delete', 'datashare_consumer_share_subscription_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_command('list-source-dataset', 'datashare_consumer_share_subscription_list_source_dataset')
        g.custom_command('list-source-share-synchronization-setting', 'datashare_consumer_share_subscription_list_sourc'
                         'e_share_synchronization_setting')
        g.custom_command('synchronization cancel', 'datashare_consumer_share_subscription_synchronization_cancel',
                         supports_no_wait=True)
        g.custom_command('synchronization list-detail', 'datashare_consumer_share_subscription_synchronization_list_det'
                         'ail')
        g.custom_command('synchronization start', 'datashare_consumer_share_subscription_synchronization_start',
                         supports_no_wait=True)
        g.custom_wait_command('wait', 'datashare_consumer_share_subscription_show')

    from azext_datashare.generated._client_factory import cf_synchronization_setting
    datashare_synchronization_setting = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._synchronization_settings_operations#Synchr'
        'onizationSettingsOperations.{}',
        client_factory=cf_synchronization_setting)
    with self.command_group('datashare synchronization-setting', datashare_synchronization_setting,
                            client_factory=cf_synchronization_setting) as g:
        g.custom_command('list', 'datashare_synchronization_setting_list')
        g.custom_show_command('show', 'datashare_synchronization_setting_show')
        g.custom_command('create', 'datashare_synchronization_setting_create')
        g.custom_command('delete', 'datashare_synchronization_setting_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_wait_command('wait', 'datashare_synchronization_setting_show')

    from azext_datashare.generated._client_factory import cf_trigger
    datashare_trigger = CliCommandType(
        operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._triggers_operations#TriggersOperations.{}',
        client_factory=cf_trigger)
    with self.command_group('datashare consumer trigger', datashare_trigger, client_factory=cf_trigger) as g:
        g.custom_command('list', 'datashare_consumer_trigger_list')
        g.custom_show_command('show', 'datashare_consumer_trigger_show')
        g.custom_command('create', 'datashare_consumer_trigger_create', supports_no_wait=True)
        g.custom_command('delete', 'datashare_consumer_trigger_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datashare_consumer_trigger_show')
