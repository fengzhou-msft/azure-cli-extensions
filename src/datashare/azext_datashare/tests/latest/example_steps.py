# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /Accounts/put/Accounts_Create
@try_manual
def step_account_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare account create '
             '--location "West US 2" '
             '--tags tag1="Red" tag2="White" '
             '--name "{myAccount}" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az datashare account wait --created '
             '--name "{myAccount}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Accounts/get/Accounts_Get
@try_manual
def step_account_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare account show '
             '--name "{myAccount}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Accounts/get/Accounts_ListByResourceGroup
@try_manual
def step_account_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare account list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Accounts/get/Accounts_ListBySubscription
@try_manual
def step_account_list2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare account list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Accounts/patch/Accounts_Update
@try_manual
def step_account_update(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare account update '
             '--name "{myAccount}" '
             '--tags tag1="Red" tag2="White" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataSetMappings/put/DataSetMappings_SqlDW_Create
@try_manual
def step_consumer_dataset_mapping_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer dataset-mapping create '
             '--account-name "{myAccount}" '
             '--sqldw-table-data-set-mapping data-set-id="a08f184b-0567-4b11-ba22-a1199336d226" '
             'data-warehouse-name="DataWarehouse1" schema-name="dbo" sql-server-resource-id="/subscriptions/{subscripti'
             'on_id}/resourceGroups/{rg}/providers/Microsoft.Sql/servers/Server1" table-name="Table1" '
             '--name "{myDataSetMapping}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /DataSetMappings/put/DataSetMappings_SqlDWDataSetToAdlsGen2File_Create
@try_manual
def step_consumer_dataset_mapping_create2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer dataset-mapping create '
             '--account-name "{myAccount}" '
             '--adls-gen2-file-data-set-mapping data-set-id="a08f184b-0567-4b11-ba22-a1199336d226" file-path="file21" '
             'file-system="fileSystem" output-type="Csv" resource-group="{rg}" storage-account-name="storage2" '
             'subscription-id="433a8dfd-e5d5-4e77-ad86-90acdc75eb1a" '
             '--name "{myDataSetMapping}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /Shares/put/Shares_Create
@try_manual
def step_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare create '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--description "share description" '
             '--share-kind "CopyBased" '
             '--terms "Confidential" '
             '--name "{myShare}"',
             checks=checks)


# EXAMPLE: /Shares/get/Shares_Get
@try_manual
def step_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare show '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShare}"',
             checks=checks)


# EXAMPLE: /Shares/get/Shares_ListByAccount
@try_manual
def step_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Shares/post/Shares_ListSynchronizationDetails
@try_manual
def step_synchronization_list_detail(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare synchronization list-detail '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShare}" '
             '--id "7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"',
             checks=checks)


# EXAMPLE: /Shares/post/Shares_ListSynchronizations
@try_manual
def step_synchronization_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare synchronization list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShare}"',
             checks=checks)


# EXAMPLE: /DataSets/put/DataSets_Create
@try_manual
def step_dataset_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare dataset create '
             '--account-name "{myAccount}" '
             '--blob-data-set container-name="C1" file-path="file21" resource-group="{rg}" '
             'storage-account-name="storage2" subscription-id="433a8dfd-e5d5-4e77-ad86-90acdc75eb1a" '
             '--name "{myDataSet}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /DataSets/put/DataSets_KustoCluster_Create
@try_manual
def step_dataset_create2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare dataset create '
             '--account-name "{myAccount}" '
             '--kusto-cluster-data-set kusto-cluster-resource-id="/subscriptions/{subscription_id}/resourceGroups/{rg}/'
             'providers/Microsoft.Kusto/clusters/Cluster1" '
             '--name "{myDataSet}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /DataSets/put/DataSets_KustoDatabase_Create
@try_manual
def step_dataset_create3(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare dataset create '
             '--account-name "{myAccount}" '
             '--kusto-database-data-set kusto-database-resource-id="/subscriptions/{subscription_id}/resourceGroups/{rg'
             '}/providers/Microsoft.Kusto/clusters/Cluster1/databases/Database1" '
             '--name "{myDataSet}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /DataSets/put/DataSets_SqlDBTable_Create
@try_manual
def step_dataset_create4(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare dataset create '
             '--account-name "{myAccount}" '
             '--sqldb-table-data-set database-name="SqlDB1" schema-name="dbo" sql-server-resource-id="/subscriptions/{s'
             'ubscription_id}/resourceGroups/{rg}/providers/Microsoft.Sql/servers/Server1" table-name="Table1" '
             '--name "{myDataSet}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /DataSets/put/DataSets_SqlDWTable_Create
@try_manual
def step_dataset_create5(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare dataset create '
             '--account-name "{myAccount}" '
             '--sqldw-table-data-set data-warehouse-name="DataWarehouse1" schema-name="dbo" '
             'sql-server-resource-id="/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Sql/serv'
             'ers/Server1" table-name="Table1" '
             '--name "{myDataSet}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /DataSets/get/DataSets_Get
@try_manual
def step_dataset_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare dataset show '
             '--account-name "{myAccount}" '
             '--name "{myDataSet}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /DataSets/get/DataSets_ListByShare
@try_manual
def step_dataset_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare dataset list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /DataSets/delete/DataSets_Delete
@try_manual
def step_dataset_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare dataset delete -y '
             '--account-name "{myAccount}" '
             '--name "{myDataSet}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /Invitations/put/Invitations_Create
@try_manual
def step_invitation_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare invitation create '
             '--account-name "{myAccount}" '
             '--target-email "receiver@microsoft.com" '
             '--name "{myInvitation}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /Invitations/get/Invitations_Get
@try_manual
def step_invitation_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare invitation show '
             '--account-name "{myAccount}" '
             '--name "{myInvitation}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /Invitations/get/Invitations_ListByShare
@try_manual
def step_invitation_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare invitation list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /Invitations/delete/Invitations_Delete
@try_manual
def step_invitation_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare invitation delete -y '
             '--account-name "{myAccount}" '
             '--name "{myInvitation}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /ProviderShareSubscriptions/get/ProviderShareSubscriptions_GetByShare
@try_manual
def step_provider_share_subscription_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare provider-share-subscription show '
             '--account-name "{myAccount}" '
             '--provider-share-subscription-id "4256e2cf-0f82-4865-961b-12f83333f487" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /ProviderShareSubscriptions/get/ProviderShareSubscriptions_ListByShare
@try_manual
def step_provider_share_subscription_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare provider-share-subscription list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /ProviderShareSubscriptions/post/ProviderShareSubscriptions_Reinstate
@try_manual
def step_provider_share_subscription_reinstate(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare provider-share-subscription reinstate '
             '--account-name "{myAccount}" '
             '--provider-share-subscription-id "4256e2cf-0f82-4865-961b-12f83333f487" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /ProviderShareSubscriptions/post/ProviderShareSubscriptions_Revoke
@try_manual
def step_provider_share_subscription_revoke(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare provider-share-subscription revoke '
             '--account-name "{myAccount}" '
             '--provider-share-subscription-id "4256e2cf-0f82-4865-961b-12f83333f487" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /Shares/delete/Shares_Delete
@try_manual
def step_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare delete -y '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShare}"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/put/ShareSubscriptions_Create
@try_manual
def step_consumer_share_subscription_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription create '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--invitation-id "12345678-1234-1234-12345678abd" '
             '--source-share-location "eastus2" '
             '--name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/get/ConsumerSourceDataSets_ListByShareSubscription
@try_manual
def step_consumer_share_subscription(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription list-source-dataset '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShare}"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/get/ShareSubscriptions_Get
@try_manual
def step_consumer_share_subscription_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription show '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/get/ShareSubscriptions_ListByAccount
@try_manual
def step_consumer_share_subscription_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/post/ShareSubscriptions_CancelSynchronization
@try_manual
def step_consumer_share_subscription2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription synchronization cancel '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShareSubscription}" '
             '--id "7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/post/ShareSubscriptions_ListSourceShareSynchronizationSettings
@try_manual
def step_consumer_share_subscription3(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription list-source-share-synchronization-setting '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShareSubscription2}"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/post/ShareSubscriptions_ListSynchronizationDetails
@try_manual
def step_consumer_share_subscription4(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription synchronization list-detail '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShareSubscription2}" '
             '--id "7d0536a6-3fa5-43de-b152-3d07c4f6b2bb"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/post/ShareSubscriptions_ListSynchronizations
@try_manual
def step_consumer_share_subscription5(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription synchronization list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShareSubscription2}"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/post/ShareSubscriptions_Synchronize
@try_manual
def step_consumer_share_subscription6(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription synchronization start '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShareSubscription}" '
             '--mode "Incremental"',
             checks=checks)


# EXAMPLE: /ShareSubscriptions/delete/ShareSubscriptions_Delete
@try_manual
def step_consumer_share_subscription_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer share-subscription delete -y '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /SynchronizationSettings/put/SynchronizationSettings_Create
@try_manual
def step_synchronization_setting_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare synchronization-setting create '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}" '
             '--scheduled-synchronization-setting recurrence-interval="Day" synchronization-time="2018-11-14T04:47:52.9'
             '614956Z" '
             '--name "{myDataSet}"',
             checks=checks)


# EXAMPLE: /SynchronizationSettings/get/SynchronizationSettings_Get
@try_manual
def step_synchronization_setting_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare synchronization-setting show '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}" '
             '--name "{mySynchronizationSetting}"',
             checks=checks)


# EXAMPLE: /SynchronizationSettings/get/SynchronizationSettings_ListByShare
@try_manual
def step_synchronization_setting_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare synchronization-setting list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}"',
             checks=checks)


# EXAMPLE: /SynchronizationSettings/delete/SynchronizationSettings_Delete
@try_manual
def step_synchronization_setting_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare synchronization-setting delete -y '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-name "{myShare}" '
             '--name "{mySynchronizationSetting}"',
             checks=checks)


# EXAMPLE: /Triggers/put/Triggers_Create
@try_manual
def step_consumer_trigger_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer trigger create '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}" '
             '--scheduled-trigger recurrence-interval="Day" synchronization-mode="Incremental" '
             'synchronization-time="2018-11-14T04:47:52.9614956Z" '
             '--name "{myTrigger}"',
             checks=checks)


# EXAMPLE: /Triggers/get/Triggers_Get
@try_manual
def step_consumer_trigger_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer trigger show '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}" '
             '--name "{myTrigger}"',
             checks=checks)


# EXAMPLE: /Triggers/get/Triggers_ListByShareSubscription
@try_manual
def step_consumer_trigger_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer trigger list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /Triggers/delete/Triggers_Delete
@try_manual
def step_consumer_trigger_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer trigger delete -y '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}" '
             '--name "{myTrigger}"',
             checks=checks)


# EXAMPLE: /Accounts/delete/Accounts_Delete
@try_manual
def step_account_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare account delete -y '
             '--name "{myAccount}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ConsumerInvitations/get/ConsumerInvitations_Get
@try_manual
def step_consumer_invitation_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer invitation show '
             '--invitation-id "dfbbc788-19eb-4607-a5a1-c74181bfff03" '
             '--location "East US 2"',
             checks=checks)


# EXAMPLE: /ConsumerInvitations/get/ConsumerInvitations_ListInvitations
@try_manual
def step_consumer_invitation_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer invitation list',
             checks=checks)


# EXAMPLE: /ConsumerInvitations/post/ConsumerInvitations_RejectInvitation
@try_manual
def step_consumer_invitation_reject(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer invitation reject '
             '--invitation-id "dfbbc788-19eb-4607-a5a1-c74181bfff03" '
             '--location "East US 2"',
             checks=checks)


# EXAMPLE: /DataSetMappings/put/DataSetMappings_Create
@try_manual
def step_consumer_dataset_mapping_create3(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer dataset-mapping create '
             '--account-name "{myAccount}" '
             '--blob-data-set-mapping container-name="C1" data-set-id="a08f184b-0567-4b11-ba22-a1199336d226" '
             'file-path="file21" resource-group="{rg}" storage-account-name="storage2" subscription-id="433a8dfd-e5d5-4'
             'e77-ad86-90acdc75eb1a" '
             '--name "{myDataSetMapping}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /DataSetMappings/put/DataSetMappings_SqlDB_Create
@try_manual
def step_consumer_dataset_mapping_create4(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer dataset-mapping create '
             '--account-name "{myAccount}" '
             '--sqldb-table-data-set-mapping database-name="Database1" data-set-id="a08f184b-0567-4b11-ba22-a1199336d22'
             '6" schema-name="dbo" sql-server-resource-id="/subscriptions/{subscription_id}/resourceGroups/{rg}/provide'
             'rs/Microsoft.Sql/servers/Server1" table-name="Table1" '
             '--name "{myDataSetMapping}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /DataSetMappings/get/DataSetMappings_Get
@try_manual
def step_consumer_dataset_mapping_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer dataset-mapping show '
             '--account-name "{myAccount}" '
             '--name "{myDataSetMapping}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /DataSetMappings/get/DataSetMappings_ListByShareSubscription
@try_manual
def step_consumer_dataset_mapping_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer dataset-mapping list '
             '--account-name "{myAccount}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}"',
             checks=checks)


# EXAMPLE: /DataSetMappings/delete/DataSetMappings_Delete
@try_manual
def step_consumer_dataset_mapping_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datashare consumer dataset-mapping delete -y '
             '--account-name "{myAccount}" '
             '--name "{myDataSetMapping}" '
             '--resource-group "{rg}" '
             '--share-subscription-name "{myShareSubscription}"',
             checks=checks)

